"use client";

import { Container, Title } from "@/components/shared";
import Pagination from "@/components/shared/pagination/pagination";
import Button from "@/components/ui/button/button";
import { Input } from "@/components/ui/input/input";
import { Select } from "@/components/ui/select/select";
import { useEffect, useState } from "react";

interface IFields {
  id: string;
  name: string;
  label: string;
  placeholder: string;
  value: string;
  options?: string[];
  errorCondition?: (value: string) => boolean;
  errorMessage?: string;
  multiline?: boolean;
}
const initialFields = [
  {
    id: "projectName",
    name: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    label: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    placeholder: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
    value: "",
    multiline: false,
    errorCondition: (value: string) => !value.trim(),
    errorMessage: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
  },
  {
    id: "country",
    name: "–°—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å (–∫–æ–ø—Ä–æ–¥—É–∫—Ü–∏—è)",
    label: "–°—Ç—Ä–∞–Ω–∞-–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å (–∫–æ–ø—Ä–æ–¥—É–∫—Ü–∏—è)",
    placeholder: "–°—Ç—Ä–∞–Ω–∞",
    value: "",
    options: [
      "–†–æ—Å—Å–∏—è",
      "–°–®–ê",
      "–ö–∞–Ω–∞–¥–∞",
      "–ì–µ—Ä–º–∞–Ω–∏—è",
      "–§—Ä–∞–Ω—Ü–∏—è",
      "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è",
      "–ò—Ç–∞–ª–∏—è",
      "–ò—Å–ø–∞–Ω–∏—è",
      "–ö–∏—Ç–∞–π",
      "–Ø–ø–æ–Ω–∏—è",
      "–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è",
      "–ê–≤—Å—Ç—Ä–∞–ª–∏—è",
      "–ò–Ω–¥–∏—è",
      "–ë—Ä–∞–∑–∏–ª–∏—è",
      "–ú–µ–∫—Å–∏–∫–∞",
    ],
    errorCondition: (value: string) => !value.trim(),
    errorMessage: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
  },

  {
    id: "genre",
    name: "–ñ–∞–Ω—Ä",
    label: "–ñ–∞–Ω—Ä",
    placeholder: "–ñ–∞–Ω—Ä",
    value: "",
    options: [
      "üé≠ –î—Ä–∞–º–∞",
      "üòÇ –ö–æ–º–µ–¥–∏—è",
      "üè¥‚Äç‚ò†Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
      "üßö‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
      "üëª –£–∂–∞—Å—ã",
      "üî™ –¢—Ä–∏–ª–ª–µ—Ä",
      "üé® –ê–Ω–∏–º–∞—Ü–∏—è",
    ],
    errorCondition: (value: string) => !value.trim(),
    errorMessage: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
  },
  {
    id: "cost",
    name: "–°–≤–µ–¥–µ–Ω–∏—è –æ —Å–º–µ—Ç–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å",
    label:
      "–°–≤–µ–¥–µ–Ω–∏—è –æ —Å–º–µ—Ç–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ñ–∏–ª—å–º–∞ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å",
    placeholder: "–°–º–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
    value: "",
    multiline: false,
  },
  {
    id: "format",
    name: "–§–æ—Ä–º–∞—Ç",
    label:
      "–§–æ—Ä–º–∞—Ç (–¥–ª—è –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –±–æ–ª—å—à–æ–≥–æ —ç–∫—Ä–∞–Ω–∞, –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è, –¥—Ä—É–≥–æ–µ)",
    placeholder: "–§–æ—Ä–º–∞—Ç",
    value: "",
    options: ["–û–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", "–ë–æ–ª—å—à–æ–π —ç–∫—Ä–∞–Ω", "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è", "–î—Ä—É–≥–æ–µ"],
    errorCondition: (value: string) => !value.trim(),
    errorMessage: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ",
  },
  {
    id: "synopsis",
    name: "–°–∏–Ω–æ–ø—Å–∏—Å",
    label: "–°–∏–Ω–æ–ø—Å–∏—Å",
    placeholder: "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ",
    value: "",
    multiline: true,
  },
  {
    id: "unfNumber",
    name: "–ù–æ–º–µ—Ä –£–ù–§ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
    label: "–ù–æ–º–µ—Ä –£–ù–§ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
    placeholder: "890-000-000-000",
    value: "",
    multiline: false,
  },
];
export default function Home() {
  const [reset, setReset] = useState(false);
  const [isButtonDisabled, setIsButtonDisabled] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = 4;

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };
  const [fields, setFields] = useState(() => {
    let savedFields: string | undefined = '';
    if (typeof window !== "undefined") {
      savedFields = localStorage.getItem("fields") || undefined;
    }

    if (savedFields) {
      const parsedFields = JSON.parse(savedFields);

      return parsedFields.map((savedField: (typeof initialFields)[number]) => {
        const initialField = initialFields.find(
          (field) => field.id === savedField.id,
        );
        return {
          ...savedField,
          errorCondition: initialField?.errorCondition,
          errorMessage: initialField?.errorMessage,
        };
      });
    }

    return initialFields;
  });

  const resetForm = () => {
    setFields((prevFields: typeof fields) => {
      return prevFields.map((field: (typeof fields)[number]) => ({
        ...field,
        value: "",
      }));
    });
    setReset(true);
  };

  useEffect(() => {
    if (reset) {
      setReset(false);
    }
  }, [reset]);

  useEffect(() => {
    localStorage.setItem("fields", JSON.stringify(fields));
    const hasError = fields.some((field: (typeof fields)[number]) => {
      if (field.errorCondition) {
        return field.value.trim() === "" && field.errorCondition(field.value);
      }
      return false;
    });
    setIsButtonDisabled(hasError);
  }, [fields]);

  const handleValueChange = (id: string, value: string) => {
    setFields((prevFields: typeof fields) => {
      return prevFields.map((field: (typeof fields)[number]) =>
        field.id === id ? { ...field, value } : field,
      );
    });
  };

  const nextStep = () => {
    let result = {};
    fields.map((field: (typeof fields)[number]) => {
      result = { ...result, [field.id]: field.value };
    });
    console.log(result);
    return localStorage.setItem("fields", JSON.stringify(fields));
  };

  return (
    <div className="wrapper">
      <div className="form">
        <Container>
          <div className="form__top">
            <div className="form__top-title">
              <Title size="xl" text="–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å–º–∞"></Title>
            </div>
            <div>
              <Button variant="outline" onClick={resetForm}>
                –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
              </Button>
            </div>
          </div>

          <div className="form__body">
            {fields.map((field) =>
              field.options ? (
                <Select
                  key={field.id}
                  id={field.id}
                  name={field.name}
                  label={field.label}
                  placeholder={field.placeholder}
                  value={field.value}
                  options={field.options}
                  errorCondition={field.errorCondition}
                  errorMessage={field.errorMessage}
                  onValueChange={(value) => handleValueChange(field.id, value)}
                  reset={reset}
                />
              ) : (
                <Input
                  className={`form__body-input ${field.id === "synopsis" && "form__body-input--multiline"}`}
                  key={field.id}
                  label={field.label}
                  placeholder={field.placeholder}
                  value={field.value}
                  multiline={field.multiline}
                  onValueChange={(value) => handleValueChange(field.id, value)}
                  errorCondition={field.errorCondition}
                  errorMessage={field.errorMessage}
                  reset={reset}
                />
              ),
            )}
          </div>

          <div className="form__bottom">
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={handlePageChange}
            ></Pagination>
            <div>
              <Button
                variant="outline"
                onClick={nextStep}
                disabled={isButtonDisabled}
              >
                <span>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥</span>
                <svg
                  width="19"
                  height="16"
                  viewBox="0 0 19 16"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M1.13385 7.99999L17.2294 7.99999M17.2294 7.99999L10.3313 1.11252M17.2294 7.99999L10.3313 14.8875"
                    stroke="#ACACAC"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </Button>
            </div>
          </div>
        </Container>
      </div>
    </div>
  );
}
